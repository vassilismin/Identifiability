create_txt = TRUE)
profile_likelihood <- function(obj_f,
i,
thetas,
thetas_names,
constant_params = NULL,
data_df,
errors_df,
lb, ub, N_samples,
alpha, df, q, global_optimum,
min_step_coef, max_step_coef,
break_at_bounds = FALSE,
# nlopt settings for the main optimization problem
opts = list("algorithm" = "NLOPT_LN_NELDERMEAD",
"xtol_rel" = 1e-06,
"ftol_rel" = 1e-06,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 300,
"print_level" = 1),
# nlopt settings for the estimation of theta_step
opts_theta_step = list("algorithm" = 'NLOPT_LN_SBPLX',
"xtol_rel" = 1e-05,
"ftol_rel" = 1e-05,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 50,
"print_level" = 0),
create_txt = FALSE){
# INPUT VARIABLES:
# obj_f             function that returns the value of the objective function
# i                 integer defining the position of the parameter to estimate the profile-likelihood
# thetas            vector containing the optimal values of parameters
# thetas_names      vector of characters with the names of the parameters
# constant_params   vector with any extra constant parameters of the model and their names
# data_df           dataframe containing the data used in the obj_f
# errors_df         dataframe with the meassured experimental errors (or SD values)
# lb                vector with the lower bounds of the "thetas" parameters
# ub                vector with the upper bounds of the "thetas" parameters
# N_samples         integer defining the number of samples taken around the theta optimal
#                   value (N samples will be taken from each side of the theta)
# alpha             probability of chi-squared to estimate the quantile (it is
#                   the "p" variable of qchisq() function)
# df                degrees of freedom of qchisq()
# global_optimum    scalar defining the global minimum of the objective function
# q                 a variable used in the estimation of the adaptive step (see Raue et al., 2009)
# max_step_coef     coefficient defining the maximum permitted step
# min_step_coef     coefficient defining the minimum permitted step
# break_at_bounds   logical; if TRUE the the sampling of the parameter stops because the bounds were exceeded
# opts              list with the options selected for the minimization of the objective function
#                   (check the nloptr package for more details)
# opts_theta_step   list with the options selected for the estimation of the adaptive step
#                   (check the nloptr package for more details)
# create_txt        logical; if TRUE a txt file will be created at the current working directory
#                   to save the samples of the parameters and the corresponding values of the objective function
# Estimate the Delta_alpha parameter
Delta_alpha <- qchisq(alpha, df)
# Take the name of the i-th parameter
theta_i_name <- names(thetas)[i] # the name of the theta_i parameter
# Function to estimate the theta_step by solving the equation
# chi^2(theta) - chi^2(theta_hat) - q*Delta_alpha = 0
theta_step_estimation <- function(theta_step, theta_last, obj_f, constant_params, index, current_score, q, Delta_alpha){
i <- index
x <- theta_last
chi2_last <- obj_f(x = x, constant_theta = NULL, constant_theta_name = NULL, params_names = names(x),
constant_params = constant_params,
PFAS_data = data_df, Cwater = Cwater, age = age, temperatures = temperatures,
MW = MW, weights_values = errors_df)
x[i] <- x[i] + theta_step
chi2 <- obj_f(x = x, constant_theta = NULL, constant_theta_name = NULL, params_names = names(x),
constant_params = constant_params,
PFAS_data = data_df, Cwater = Cwater, age = age, temperatures = temperatures,
MW = MW, weights_values = errors_df)
return(abs(chi2 - chi2_last - q*Delta_alpha))
}
# Set the threshold. The threshold is estimated as global_optimum + Delta_alpha
threshold =  global_optimum + Delta_alpha
if(create_txt) sink(paste0("check_progress_",thetas_names[i], ".txt")) #keep a txt to check the progress while running
# Forward search
cat("Forward search begins...", "\n")
# Initiate a counter for the number of iterations
iter_counter <- 0
# Inititate a parameter to check if the threshold is exceeded in each iteration
current_score <- global_optimum
# Create a 2-columns dataframe to store the tested theta_i values
# and the corresponding values of the objective function
forward_results_df <- data.frame(matrix(NA, nrow=N_samples, ncol = 2))
colnames(forward_results_df) <- c(theta_i_name, "Likelihood")
# take as constant_theta the parameter that will be fixed to a constant value
constant_theta <- thetas[i]
# Initiate theta_last and set it equal with the theta_hat
theta_last <- thetas
# set the current score equal global optimum to estimate the first step
current_score <- global_optimum
while (iter_counter < N_samples & current_score < threshold) {
iter_counter <- iter_counter + 1
# Estimation of theta_step
theta_step <-  nloptr::nloptr(x0 = 0.1,
eval_f = theta_step_estimation,
lb	= 1e-06,
ub = 1,
opts = opts_theta_step,
theta_last = theta_last, index = i,
current_score = current_score, q = q, Delta_alpha=Delta_alpha,
obj_f=obj_f,
constant_params=constant_params)$solution
# If theta_step exceeds the limits, take the value of the limit
if(theta_step > max_step_coef*abs(thetas[[i]])){
theta_step <- max_step_coef*abs(thetas[[i]])
}else if(theta_step < min_step_coef*abs(thetas[[i]])){
theta_step <- min_step_coef*abs(thetas[[i]])
}
# The parameter whose profile likelihood is examined
constant_theta <- constant_theta + theta_step
#Check if the constant_theta exceeded the corresponding upper boundary
if(constant_theta > ub[i]){
f_exit = 3
break
}
# The name of the constant theta parameter
constant_theta_name <- theta_i_name
# Take as x0 all the parameters except the one which will be fixed
x0 <- theta_last[-i]
# The names of the rest parameters
params_names <- names(x0)
# define the lower and upper bounds of the parameters
set.seed(12312)
optimization<- nloptr::nloptr(x0 = x0,
eval_f = obj_f,
lb	= lb[-i],
ub = ub[-i],
opts = opts,
constant_theta = constant_theta,
constant_theta_name = constant_theta_name,
params_names = params_names,
constant_params=constant_params,
PFAS_data = data_df,
Cwater = Cwater,
age = age ,
temperatures = temperatures,
MW = MW,
weights_values = errors_df)
cat("Calculating PL for parameter ", theta_i_name, " and iter = ", iter_counter,". ", "step =", theta_step , constant_theta_name ," = ", constant_theta , "=> Likelihood = ", optimization$objective, "\n")
forward_results_df[iter_counter,] <- c(constant_theta, optimization$objective)
# update current score
current_score <- optimization$objective
#update theta_last vector with the new optimized values
for (k in 1:length(theta_last)) {
if(k==i){
theta_last[k] <- constant_theta
}else if(k>i){
theta_last[k] <- optimization$solution[k-1]
}else{
theta_last[k] <- optimization$solution[k]}
}
}
if(iter_counter >= N_samples){
f_exit <- 1
}else if(current_score > threshold){
f_exit <- 2
}
cat("Forward search ended after ", iter_counter, "iterations.", "\n")
# Backward search
cat("Backward search begins...", "\n")
# Initiate a counter for the number of iterations
iter_counter <- 0
# Inititate a parameter to check if the threshold is exceeded in each iteration
current_score <- global_optimum
# Create a 2-columns dataframe to store the tested theta_i values
# and the corresponding values of the objective function
backward_results_df <- data.frame(matrix(NA, nrow=N_samples, ncol = 2))
colnames(backward_results_df) <- c(theta_i_name, "Likelihood")
# take as constant_theta the parameter that will be fixed to a constant value
constant_theta <- thetas[i]
# Initiate theta_last and set it equal with the theta_hat
theta_last <- thetas
# set the current score equal global optimum to estimate the first step
current_score <- global_optimum
while (iter_counter < N_samples & current_score < threshold) {
iter_counter <- iter_counter + 1
# Estimation of theta_step
theta_step <-  nloptr::nloptr(x0 = 0.1,
eval_f = theta_step_estimation,
lb	= 1e-06,
ub = 1,
opts = opts_theta_step,
theta_last = theta_last, index = i,
current_score = current_score, q = q, Delta_alpha=Delta_alpha,
obj_f=obj_f,
constant_params=constant_params)$solution
# If theta_step exceeds the limits, take the value of the limit
if(theta_step > max_step_coef*abs(thetas[[i]])){
theta_step <- max_step_coef*abs(thetas[[i]])
}else if(theta_step < min_step_coef*abs(thetas[[i]])){
theta_step <- min_step_coef*abs(thetas[[i]])
}
# The parameter whose profile likelihood is examined
constant_theta <- constant_theta - theta_step
#Check if the constant_theta exceeded the corresponding lower boundary
if(constant_theta < lb[i]){
b_exit <- 3
break
}
# The name of the constant theta parameter
constant_theta_name <- theta_i_name
# Take as x0 all the parameters except the one which will be fixed
x0 <- theta_last[-i]
# The names of the rest parameters
params_names <- names(x0)
set.seed(12312)
optimization<- nloptr::nloptr(x0 = x0,
eval_f = obj_f,
lb	= lb[-i],
ub = ub[-i],
opts = opts,
constant_theta = constant_theta,
constant_theta_name = constant_theta_name,
params_names = params_names,
constant_params=constant_params,
PFAS_data = data_df,
Cwater = Cwater,
age = age ,
temperatures = temperatures,
MW = MW,
weights_values = errors_df)
cat("Calculating PL for parameter ", theta_i_name, " and iter = ", iter_counter,". ", "step =", theta_step , constant_theta_name ," = ", constant_theta , "=> Likelihood = ", optimization$objective, "\n")
backward_results_df[iter_counter,] <- c(constant_theta, optimization$objective)
# update current score
current_score <- optimization$objective
#update theta_last vector with the new optimized values
for (k in 1:length(theta_last)) {
if(k==i){
theta_last[k] <- constant_theta
}else if(k>i){
theta_last[k] <- optimization$solution[k-1]
}else{
theta_last[k] <- optimization$solution[k]}
}
}
if(iter_counter >= N_samples){
b_exit <- 1
}else if(current_score > threshold){
b_exit <- 2
}
cat("Backward search ended after ", iter_counter, "iterations.", "\n")
results_df <- rbind(backward_results_df, forward_results_df, c(thetas[i], global_optimum))
results_df <- results_df[order(results_df[,1]),]
results_df <- results_df[complete.cases(results_df),]
if(create_txt) sink()
return(list("plik"=results_df, "b_exit"=b_exit, "f_exit"=f_exit))
}
test <- Identifiability_analysis(obj_f = obj_f,
thetas=thetas,
thetas_names=thetas_names,
data_df=data_ls ,
errors_df=errors_df,
lb=lb ,
ub=ub,
N_samples = 60,
alpha = 0.95 ,
df = 1,
q = 0.1,
global_optimum = global_optimum ,
min_step_coef = 1e-04 ,
max_step_coef = 0.2,
N_cores = 3,
constant_params = constant_params,
exported_to_cluster = exported_to_cluster,
break_at_bounds = FALSE,
# nlopt settings for the main optimization problem
opts = list("algorithm" = "NLOPT_LN_NELDERMEAD",
"xtol_rel" = 1e-06,
"ftol_rel" = 1e-06,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 300,
"print_level" = 0),
# nlopt settings for the estimation of theta_step
opts_theta_step = list("algorithm" = 'NLOPT_LN_SBPLX',
"xtol_rel" = 1e-05 ,
"ftol_rel" = 1e-05,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 50,
"print_level" = 0),
create_txt = TRUE)
Identifiability_analysis <- function(obj_f, thetas, thetas_names, data_df, errors_df,
lb, ub,
N_samples = 50,
alpha = 0.95, df = 1,
q = 0.5,
global_optimum,
min_step_coef = 1e-03, max_step_coef = 0.2,
N_cores,
constant_params = NULL,
exported_to_cluster = NULL,
break_at_bounds = FALSE,
# nlopt settings for the main optimization problem
opts = list("algorithm" = "NLOPT_LN_NELDERMEAD",
"xtol_rel" = 1e-06,
"ftol_rel" = 1e-06,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 300,
"print_level" = 0),
# nlopt settings for the estimation of theta_step
opts_theta_step = list("algorithm" = 'NLOPT_LN_SBPLX',
"xtol_rel_step" = 1e-05,
"ftol_rel_step" = 1e-05,
"ftol_abs_step" = 0.0,
"xtol_abs_step" = 0.0 ,
"maxeval_step" = 50,
"print_level_step" = 0),
create_txt = TRUE){
# Number of parameters tested in the identifiability analysis
N_parameters <- length(thetas)
# prepare the input for parallel processing
X <- vector("list", N_parameters)
for(i in 1:N_parameters){
X[[i]] <- list(index=i, thetas=thetas, thetas_names=thetas_names,
constant_params = constant_params,
data_df = data_df,
errors_df = errors_df,
lb=lb, ub=ub, N_samples=N_samples,
alpha=alpha, df=df,
global_optimum = global_optimum,
q = q,
max_step_coef = max_step_coef,
min_step_coef = min_step_coef,
break_at_bounds = FALSE,
opts = opts,
opts_theta_step=opts_theta_step,
create_txt = create_txt)
}
start.time <- Sys.time()
cluster <- makeCluster(N_cores)
parallel_func <- function(X){
with(as.list(X),{
profile_likelihood(obj_f,
i=index,
thetas,
thetas_names,
constant_params = constant_params,
data_df,
errors_df,
lb, ub, N_samples,
alpha, df, q, global_optimum,
min_step_coef, max_step_coef,
break_at_bounds = FALSE,
# nlopt settings for the main optimization problem
opts = opts,
# nlopt settings for the estimation of theta_step
opts_theta_step = opts_theta_step,
create_txt = TRUE)
})
}
# Export to the cluster any function or parameter that the obj_f needs to work.
clusterExport(cl=cluster, c(names(exported_to_cluster),"obj_f", "profile_likelihood"))
output <- parLapply(cluster, X, parallel_func)
stopCluster(cluster)
total.duration <- Sys.time() - start.time
# Estimation of the confidence intervals
ci_estimation <- function(pl_results, alpha=0.95, df=1, global_optimum){
# pl_results should be a dataframe with 2 columns containing the theta values
# and the corresponding chi^2 values
# As confidence interevals of each theta are considered the borders of the
# following refion:
# {theta | chi^2(theta) - chi^2(theta_hat) < Delta_alpha} where
Delta_alpha = qchisq(alpha, df)
# Estimate the lower confidence interval
# Check if the threshold was exceeded at the backwards search. If true, then
# the lower bound is the last theta under the threshold, else it is considered
# -Inf.
if(pl_results[1,2] > global_optimum + Delta_alpha){
lower_bound <- pl_results[2,1]
}else{
lower_bound <- -Inf
}
# Estimate the upper confidence interval
# Check if the threshold was exceeded at the forward search. If true, then
# the lower bound is the last theta under the threshold, else it is considered
# +Inf.
if(pl_results[dim(pl_results)[1],2] > global_optimum + Delta_alpha){
upper_bound <- pl_results[(dim(pl_results)[1]-1),1]
}else{
upper_bound <- +Inf
}
return(list("Lower_bound" = lower_bound,
"Upper_bound" = upper_bound))
}
results_df <- data.frame(matrix(NA, ncol = 6, nrow = length(thetas)))
rownames(results_df) <- thetas_names
colnames(results_df) <- c("Non-Identifiability" , "Optimal", "Lower_Bound", "Upper_Bound", "Exit_code_B", "Exit_code_F")
for (i in 1:length(thetas)) {
pl_results <- output[[i]]$'plik'
confidence_intervals <- ci_estimation(pl_results,  alpha = 0.95, df=1, global_optimum)
results_df$Lower_Bound[i] <- confidence_intervals$Lower_bound
results_df$Upper_Bound[i] <- confidence_intervals$Upper_bound
results_df$Optimal[i] <- thetas[[i]]
results_df$Exit_code_B[i] <- output[[i]]$b_exit
results_df$Exit_code_F[i] <- output[[i]]$f_exit
if(confidence_intervals$Lower_bound == -Inf & confidence_intervals$Upper_bound == Inf){
results_df$`Non-Identifiability`[i] <- "Structural"
}else if(confidence_intervals$Lower_bound == -Inf & confidence_intervals$Upper_bound != Inf |
confidence_intervals$Lower_bound != -Inf & confidence_intervals$Upper_bound == Inf){
results_df$`Non-Identifiability`[i] <- "Practical"
}else{
results_df$`Non-Identifiability`[i] <- "Identifiable"
}
}
return(list("Likelihood_profiles" = output, "Identiafiability_Analysis" = results_df, "Total_duration" = total.duration))
}
# Extra input needed to be parsed to profile_likelihood (problem-specific parameters and data)
# Load the experimental data
data_ls <- openxlsx::read.xlsx ('C:/Users/vassi/Documents/GitHub/PFAS_biokinetics_models/D.Magna/Wang_2023/Wang_data_reduced2.xlsx', sheet = 'PFDoA')
errors_df <- read.csv('C:/Users/vassi/Documents/GitHub/Identifiability/Daphnia_magna_example/PFDoA_errors.csv')
# Convert water concentration in ng/L
Cwater = c(1.44, 2.05, 2.31)*1000
names(Cwater) <- c("16oC", "20oC", "24oC")
age = 7+7 # age of D.magna at the beginning of exposure in days
temperatures <- c(16, 20, 24) #experiment temperature in oC
MW <- 614 # molecular weight of PFDoA
# Test on ku, kon and Ke
# lower bounds of parameters
#lb <- c(4, 4, 5, 6, 1e-06)
lb <- c(3,3,3)
# upper bounds of parameters
#ub <- c(8, 9, 8.5, 8.5, 1e-04)
ub <- c(10,10,10)
constant_params <- c("Ka"=7.681146, "C_prot_init" = -4.189729)
exported_to_cluster = list("Size_estimation"=Size_estimation,
"dry_weight_estimation"=dry_weight_estimation,
"ode_func"=ode_func,
"WSSR"=WSSR,
"age"=age,
"Cwater"=Cwater,
"temperatures"=temperatures,
"MW"=MW)
thetas <- c(7.264904, 6.94284, 7.728766)
thetas_names <- c("ku", "kon", "ke")
names(thetas) <- thetas_names
global_optimum <- 6.54365835275129
test <- Identifiability_analysis(obj_f = obj_f,
thetas=thetas,
thetas_names=thetas_names,
data_df=data_ls ,
errors_df=errors_df,
lb=lb ,
ub=ub,
N_samples = 60,
alpha = 0.95 ,
df = 1,
q = 0.1,
global_optimum = global_optimum ,
min_step_coef = 1e-04 ,
max_step_coef = 0.2,
N_cores = 3,
constant_params = constant_params,
exported_to_cluster = exported_to_cluster,
break_at_bounds = FALSE,
# nlopt settings for the main optimization problem
opts = list("algorithm" = "NLOPT_LN_NELDERMEAD",
"xtol_rel" = 1e-06,
"ftol_rel" = 1e-06,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 300,
"print_level" = 0),
# nlopt settings for the estimation of theta_step
opts_theta_step = list("algorithm" = 'NLOPT_LN_SBPLX',
"xtol_rel" = 1e-05 ,
"ftol_rel" = 1e-05,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 50,
"print_level" = 0),
create_txt = TRUE)
test <- Identifiability_analysis(obj_f = obj_f,
thetas=thetas,
thetas_names=thetas_names,
data_df=data_ls ,
errors_df=errors_df,
lb=lb ,
ub=ub,
N_samples = 60,
alpha = 0.95 ,
df = 1,
q = 0.5,
global_optimum = global_optimum ,
min_step_coef = 1e-03 ,
max_step_coef = 0.2,
N_cores = 3,
constant_params = constant_params,
exported_to_cluster = exported_to_cluster,
break_at_bounds = FALSE,
# nlopt settings for the main optimization problem
opts = list("algorithm" = "NLOPT_LN_NELDERMEAD",
"xtol_rel" = 1e-06,
"ftol_rel" = 1e-06,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 300,
"print_level" = 0),
# nlopt settings for the estimation of theta_step
opts_theta_step = list("algorithm" = 'NLOPT_LN_SBPLX',
"xtol_rel" = 1e-05 ,
"ftol_rel" = 1e-05,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 50,
"print_level" = 0),
create_txt = TRUE)
